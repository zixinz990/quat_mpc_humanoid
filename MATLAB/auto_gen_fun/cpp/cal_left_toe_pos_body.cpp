//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// cal_left_toe_pos_body.cpp
//
// Code generation for function 'cal_left_toe_pos_body'
//

// Include files
#include "cal_left_toe_pos_body.h"
#include <cmath>

// Function Definitions
void cal_left_toe_pos_body(const double in1[5], double left_toe_pos_body[3])
{
  double b_t45_tmp;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t27;
  double t27_tmp;
  double t28;
  double t30;
  double t35;
  double t37_tmp;
  double t40;
  double t41;
  double t45;
  double t45_tmp;
  double t46;
  double t47;
  double t48;
  double t49;
  double t52;
  double t57;
  double t58;
  double t59;
  double t61;
  double t67;
  double t69;
  double t7;
  double t73;
  double t74;
  double t77;
  double t77_tmp;
  double t8;
  double t9;
  // CAL_LEFT_TOE_POS_BODY
  //     LEFT_TOE_POS_BODY = CAL_LEFT_TOE_POS_BODY(IN1)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     02-Mar-2024 23:21:06
  t7 = std::cos(in1[0]);
  t8 = std::cos(in1[1]);
  t9 = std::cos(in1[2]);
  t10 = std::cos(in1[3]);
  t11 = std::cos(in1[4]);
  t12 = std::sin(in1[0]);
  t13 = std::sin(in1[1]);
  t14 = std::sin(in1[2]);
  t15 = std::sin(in1[3]);
  t16 = std::sin(in1[4]);
  t17 = t7 * t13;
  t28 = t7 * 0.89253905378626919;
  t30 = t7 * 0.1573787853566756;
  t35 = t14 * 0.25881867051728752 + t9 * 0.96592592665880117;
  t45_tmp = t12 * t13;
  b_t45_tmp = t7 * t8;
  t45 = (t45_tmp * 0.1736482513311082 + t8 * 0.89253905378626919) +
        b_t45_tmp * 0.073386872872531927;
  t27_tmp = t8 * t12;
  t27 = t17 - t27_tmp * 0.42261797806762619;
  t14 = t9 * 0.25881867051728752 - t14 * 0.96592592665880117;
  t37_tmp = t12 * t35;
  t9 = (t45_tmp * 0.98480774002322313 + b_t45_tmp * 0.416197455873963) -
       t8 * 0.1573787853566756;
  t46 = t35 * (t28 + 0.073386872872531927);
  t48 = t35 * (t30 - 0.416197455873963);
  t59 = t35 * t45;
  t40 = t27 * t35;
  t41 = t27 * t14;
  t47 = t14 * (t28 + 0.073386872872531927);
  t49 = t14 * (t30 - 0.416197455873963);
  t57 = t35 * t9;
  t58 = t14 * t9;
  t61 = t14 * t45;
  t35 = t12 * t14;
  t45 = t35 * 0.90630791931552235 + t40;
  t27 = t46 + t58;
  t9 = t48 + t61;
  t14 = t49 - t59;
  t52 = t10 * t45;
  t28 = t47 - t57;
  t67 = t15 * t27;
  t73 = t15 * t9;
  t74 = t10 * t14;
  t69 = t10 * t28;
  t77_tmp = t37_tmp * 0.90630791931552235 - t41;
  t77 = t52 + -t15 * t77_tmp;
  t30 = t10 * t9 + t15 * t14;
  t9 = t10 * t27 + t15 * t28;
  t14 = t67 - t69;
  left_toe_pos_body[0] =
      (((t7 * 0.0155012981125982 + t8 * 0.0021796961771899559) +
        (((((t13 * 0.00044695575041295863 - t17 * 0.0011820007746820549) -
            t46 * 0.01306) +
           t47 * 0.24916) -
          t57 * 0.24916) -
         t58 * 0.01306)) +
       ((((((t67 * -0.2785 + t69 * 0.2785) - b_t45_tmp * 0.005764334763854388) +
           t27_tmp * 0.002796853981665954) -
          t45_tmp * 0.013639587199321641) +
         t11 * t9 / 16.0) -
        t16 * t9 / 25.0)) +
      ((t11 * t14 * -0.04 - t16 * t14 / 16.0) + 0.025053080323065451);
  t14 = t15 * t45 + t10 * t77_tmp;
  left_toe_pos_body[1] =
      ((((((((t12 * 0.015740430829912711 + t17 * 0.01385) + t40 * 0.24916) +
            t41 * 0.01306) +
           t52 * 0.2785) +
          t11 * t14 / 16.0) -
         t16 * t14 / 25.0) -
        b_t45_tmp * 0.00284) -
       t27_tmp * 0.0058532589962366228) +
      ((((((t45_tmp * -0.001200235057712058 - t37_tmp * 0.011836381426260719) +
           t35 * 0.22581568117665551) +
          t11 * t77 / 25.0) +
         t16 * t77 / 16.0) -
        t15 * t77_tmp * 0.2785) +
       0.082);
  t14 = t73 - t74;
  left_toe_pos_body[2] =
      (((t7 * 0.0027332982888126061 - t8 * 0.01236166589493983) +
        (((((t13 * -0.0025348109127530049 - t17 * 0.0002084187189579907) -
            t48 * 0.01306) +
           t49 * 0.24916) -
          t59 * 0.24916) -
         t61 * 0.01306)) +
       (((((t73 * -0.2785 + t74 * 0.2785) - b_t45_tmp * 0.0010164081892845671) +
          t27_tmp * 0.00049316103378034732) -
         t45_tmp * 0.0024050282809358488) +
        t11 * t30 / 16.0)) +
      (((t16 * t30 * -0.04 - t11 * t14 / 25.0) - t16 * t14 / 16.0) -
       0.22235210159992361);
}

// End of code generation (cal_left_toe_pos_body.cpp)
