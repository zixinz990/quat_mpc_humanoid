#include "Kinematics.h"

namespace robot {
Eigen::Matrix<double, 3, LEG_DOF> Kinematics::cal_left_foot_jac(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    double left_foot_jac_array[15] = {};
    double t10;
    double t10_tmp;
    double t11;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t33;
    double t34;
    double t35;
    double t35_tmp;
    double t36;
    double t39;
    double t52;
    double t53;
    double t54;
    double t58;
    double t59;
    double t6;
    double t60;
    double t64;
    double t66;
    double t67;
    double t68;
    double t69;
    double t7;
    double t70;
    double t73;
    double t73_tmp;
    double t74;
    double t76;
    double t77;
    double t78;
    double t8;
    double t86;
    double t88;
    double t89;
    double t9;
    double t92;
    // CAL_LEFT_FOOT_JAC
    //     LEFT_FOOT_JAC = CAL_LEFT_FOOT_JAC(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     23-Dec-2023 19:48:15
    t6 = std::cos(joint_pos[0]);
    t7 = std::cos(joint_pos[1]);
    t8 = std::cos(joint_pos[2]);
    t9 = std::cos(joint_pos[3]);
    t10 = std::sin(joint_pos[0]);
    t11 = std::sin(joint_pos[1]);
    t12 = std::sin(joint_pos[2]);
    t13 = std::sin(joint_pos[3]);
    t14 = t6 * t7;
    t15 = t6 * t11;
    t16 = t10 * t11;
    t36 = t6 * 0.89253905378626919;
    t39 = t6 * 0.1573787853566756;
    t52 = t12 * 0.25881867051728752 + t8 * 0.96592592665880117;
    t33 = t14 + t16 * 0.42261797806762619;
    t34 = t16 + t14 * 0.42261797806762619;
    t35_tmp = t7 * t10;
    t35 = t15 - t35_tmp * 0.42261797806762619;
    t53 = t8 * 0.25881867051728752 - t12 * 0.96592592665880117;
    t54 = t15 * 0.98480774002322313 - t35_tmp * 0.416197455873963;
    t58 = t15 * 0.1736482513311082 - t35_tmp * 0.073386872872531927;
    t8 = (t16 * 0.98480774002322313 + t14 * 0.416197455873963) -
         t7 * 0.1573787853566756;
    t12 = (t16 * 0.1736482513311082 + t7 * 0.89253905378626919) +
          t14 * 0.073386872872531927;
    t66 = (-(t35_tmp * 0.1736482513311082) + t11 * 0.89253905378626919) +
          t15 * 0.073386872872531927;
    t67 = t52 * (t36 + 0.073386872872531927);
    t69 = t52 * (t39 - 0.416197455873963);
    t59 = t35 * t52;
    t60 = t35 * t53;
    t64 = (t35_tmp * 0.98480774002322313 + t11 * 0.1573787853566756) -
          t15 * 0.416197455873963;
    t68 = t53 * (t36 + 0.073386872872531927);
    t70 = t53 * (t39 - 0.416197455873963);
    t76 = t52 * t8;
    t77 = t53 * t8;
    t78 = t52 * t12;
    t36 = t53 * t12;
    t39 = t10 * t52;
    t74 = t9 * (t39 * 0.90630791931552235 - t60) * -0.2785;
    t73_tmp = t10 * t53;
    t73 = t13 * (t73_tmp * 0.90630791931552235 + t59) * 0.2785;
    t86 = t9 * (t67 + t77) * 0.2785;
    t89 = t9 * (t69 + t36) * 0.2785;
    t88 = t13 * (t68 - t76) * 0.2785;
    t92 = t13 * (t70 - t78) * 0.2785;
    t10_tmp = t52 * t54;
    t12 = t53 * t54;
    left_foot_jac_array[0] =
        ((((t10 * -0.0155012981125982 + t14 * 0.002796853981665954) -
           t15 * 0.013639587199321641) +
          (t16 * 0.0011820007746820549 + t35_tmp * 0.005764334763854388)) +
         (((t39 * 0.01165656004244868 - t73_tmp * 0.22238503064138679) -
           t10_tmp * 0.24916) -
          t12 * 0.01306)) +
        (t9 * (t73_tmp * 0.89253905378626919 + t10_tmp) * -0.2785 +
         t13 * (t39 * 0.89253905378626919 - t12) * 0.2785);
    t10_tmp = t6 * t53;
    t12 = t34 * t52;
    t35 = t6 * t52;
    t8 = t34 * t53;
    left_foot_jac_array[1] =
        (((((t6 * 0.015740430829912711 - t14 * 0.0058532589962366228) -
            t15 * 0.001200235057712058) -
           t16 * 0.01385) +
          t35_tmp * 0.00284) -
         t35 * 0.011836381426260719) +
        ((((t10_tmp * 0.22581568117665551 - t12 * 0.24916) - t8 * 0.01306) +
          t9 * (t10_tmp * 0.90630791931552235 - t12) * 0.2785) -
         t13 * (t35 * 0.90630791931552235 + t8) * 0.2785);
    t10_tmp = t52 * t58;
    t12 = t53 * t58;
    left_foot_jac_array[2] =
        ((((t10 * -0.0027332982888126061 + t14 * 0.00049316103378034732) -
           t15 * 0.0024050282809358488) +
          (t16 * 0.0002084187189579907 + t35_tmp * 0.0010164081892845671)) +
         (((t39 * 0.0020553669367581831 - t73_tmp * 0.039212498159469283) -
           t10_tmp * 0.24916) -
          t12 * 0.01306)) +
        (t9 * (t73_tmp * 0.1573787853566756 + t10_tmp) * -0.2785 +
         t13 * (t39 * 0.1573787853566756 - t12) * 0.2785);
    t10_tmp = t9 * t52;
    t12 = t13 * t53;
    left_foot_jac_array[3] =
        ((t7 * 0.00044695575041295863 - t11 * 0.0021796961771899559) +
         ((t14 * -0.0011820007746820549 + t15 * 0.005764334763854388) -
          t16 * 0.002796853981665954)) +
        ((((t35_tmp * -0.013639587199321641 - t52 * t64 * 0.24916) -
           t53 * t64 * 0.01306) -
          t10_tmp * t64 * 0.2785) -
         t12 * t64 * 0.2785);
    left_foot_jac_array[4] =
        ((((((t14 * 0.01385 + t15 * 0.00284) + t16 * 0.0058532589962366228) -
            t35_tmp * 0.001200235057712058) +
           t33 * t52 * 0.24916) +
          t33 * t53 * 0.01306) +
         t9 * t33 * t52 * 0.2785) +
        t13 * t33 * t53 * 0.2785;
    left_foot_jac_array[5] =
        ((t7 * -0.0025348109127530049 + t11 * 0.01236166589493983) +
         ((t14 * -0.0002084187189579907 + t15 * 0.0010164081892845671) -
          t16 * 0.00049316103378034732)) +
        ((((t35_tmp * -0.0024050282809358488 + t52 * t66 * 0.24916) +
           t53 * t66 * 0.01306) +
          t10_tmp * t66 * 0.2785) +
         t12 * t66 * 0.2785);
    left_foot_jac_array[6] =
        ((((t67 * -0.24916 - t68 * 0.01306) + t76 * 0.01306) - t77 * 0.24916) -
         t86) -
        t88;
    left_foot_jac_array[7] = ((((t59 * -0.01306 + t60 * 0.24916) + t74) - t73) -
                              t39 * 0.22581568117665551) -
                             t73_tmp * 0.011836381426260719;
    left_foot_jac_array[8] =
        ((((t69 * -0.24916 - t70 * 0.01306) + t78 * 0.01306) - t36 * 0.24916) -
         t89) -
        t92;
    left_foot_jac_array[9] = -t86 - t88;
    left_foot_jac_array[10] = t74 - t73;
    left_foot_jac_array[11] = -t89 - t92;
    left_foot_jac_array[12] = 0.0;
    left_foot_jac_array[13] = 0.0;
    left_foot_jac_array[14] = 0.0;

    Eigen::Matrix<double, 3, LEG_DOF> left_foot_jac;
    left_foot_jac << left_foot_jac_array[0], left_foot_jac_array[3], left_foot_jac_array[6], left_foot_jac_array[9], left_foot_jac_array[12],
                     left_foot_jac_array[1], left_foot_jac_array[4], left_foot_jac_array[7], left_foot_jac_array[10], left_foot_jac_array[13],
                     left_foot_jac_array[2], left_foot_jac_array[5], left_foot_jac_array[8], left_foot_jac_array[11], left_foot_jac_array[14];
    
    return left_foot_jac;
}

Eigen::Matrix<double, 3, LEG_DOF> Kinematics::cal_right_foot_jac(const Eigen::Matrix<double, LEG_DOF, 1> joint_pos) {
    double right_foot_jac_array[15] = {};
    double t10;
    double t10_tmp;
    double t11;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t33;
    double t34;
    double t35;
    double t35_tmp;
    double t36;
    double t39;
    double t52;
    double t53;
    double t54;
    double t58;
    double t59;
    double t6;
    double t60;
    double t64;
    double t66;
    double t67;
    double t68;
    double t69;
    double t7;
    double t70;
    double t73;
    double t73_tmp;
    double t74;
    double t76;
    double t77;
    double t78;
    double t8;
    double t86;
    double t88;
    double t89;
    double t9;
    double t92;
    // CAL_RIGHT_FOOT_JAC
    //     RIGHT_FOOT_JAC = CAL_RIGHT_FOOT_JAC(IN1)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     23-Dec-2023 19:48:16
    t6 = std::cos(joint_pos[0]);
    t7 = std::cos(joint_pos[1]);
    t8 = std::cos(joint_pos[2]);
    t9 = std::cos(joint_pos[3]);
    t10 = std::sin(joint_pos[0]);
    t11 = std::sin(joint_pos[1]);
    t12 = std::sin(joint_pos[2]);
    t13 = std::sin(joint_pos[3]);
    t14 = t6 * t7;
    t15 = t6 * t11;
    t16 = t10 * t11;
    t36 = t6 * 0.89253905378626919;
    t39 = t6 * 0.1573787853566756;
    t52 = t12 * 0.25881867051728752 + t8 * 0.96592592665880117;
    t33 = t14 + t16 * 0.42261797806762619;
    t34 = t16 + t14 * 0.42261797806762619;
    t35_tmp = t7 * t10;
    t35 = t15 - t35_tmp * 0.42261797806762619;
    t53 = t8 * 0.25881867051728752 - t12 * 0.96592592665880117;
    t54 = t15 * 0.98480774002322313 - t35_tmp * 0.416197455873963;
    t58 = t15 * 0.1736482513311082 - t35_tmp * 0.073386872872531927;
    t8 = (t16 * 0.98480774002322313 + t14 * 0.416197455873963) -
         t7 * 0.1573787853566756;
    t12 = (t16 * 0.1736482513311082 + t7 * 0.89253905378626919) +
          t14 * 0.073386872872531927;
    t66 = (-(t35_tmp * 0.1736482513311082) + t11 * 0.89253905378626919) +
          t15 * 0.073386872872531927;
    t67 = t52 * (t36 + 0.073386872872531927);
    t69 = t52 * (t39 - 0.416197455873963);
    t59 = t35 * t52;
    t60 = t35 * t53;
    t64 = (t35_tmp * 0.98480774002322313 + t11 * 0.1573787853566756) -
          t15 * 0.416197455873963;
    t68 = t53 * (t36 + 0.073386872872531927);
    t70 = t53 * (t39 - 0.416197455873963);
    t76 = t52 * t8;
    t77 = t53 * t8;
    t78 = t52 * t12;
    t36 = t53 * t12;
    t39 = t10 * t52;
    t74 = t9 * (t39 * 0.90630791931552235 - t60) * -0.2785;
    t73_tmp = t10 * t53;
    t73 = t13 * (t73_tmp * 0.90630791931552235 + t59) * 0.2785;
    t86 = t9 * (t67 + t77) * 0.2785;
    t89 = t9 * (t69 + t36) * 0.2785;
    t88 = t13 * (t68 - t76) * 0.2785;
    t92 = t13 * (t70 - t78) * 0.2785;
    t10_tmp = t52 * t54;
    t12 = t53 * t54;
    right_foot_jac_array[0] =
        ((((t10 * -0.0155012981125982 - t14 * 0.002796853981665954) -
           t15 * 0.013639587199321641) +
          (t16 * -0.0011820007746820549 + t35_tmp * 0.005764334763854388)) +
         (((t39 * 0.01165656004244868 - t73_tmp * 0.22238503064138679) -
           t10_tmp * 0.24916) -
          t12 * 0.01306)) +
        (t9 * (t73_tmp * 0.89253905378626919 + t10_tmp) * -0.2785 +
         t13 * (t39 * 0.89253905378626919 - t12) * 0.2785);
    t10_tmp = t6 * t53;
    t12 = t34 * t52;
    t35 = t6 * t52;
    t8 = t34 * t53;
    right_foot_jac_array[1] =
        (((((t6 * 0.015740430829912711 - t14 * 0.0058532589962366228) +
            t15 * 0.001200235057712058) -
           t16 * 0.01385) -
          t35_tmp * 0.00284) -
         t35 * 0.011836381426260719) +
        ((((t10_tmp * 0.22581568117665551 - t12 * 0.24916) - t8 * 0.01306) +
          t9 * (t10_tmp * 0.90630791931552235 - t12) * 0.2785) -
         t13 * (t35 * 0.90630791931552235 + t8) * 0.2785);
    t10_tmp = t52 * t58;
    t12 = t53 * t58;
    right_foot_jac_array[2] =
        ((((t10 * -0.0027332982888126061 - t14 * 0.00049316103378034732) -
           t15 * 0.0024050282809358488) +
          (t16 * -0.0002084187189579907 + t35_tmp * 0.0010164081892845671)) +
         (((t39 * 0.0020553669367581831 - t73_tmp * 0.039212498159469283) -
           t10_tmp * 0.24916) -
          t12 * 0.01306)) +
        (t9 * (t73_tmp * 0.1573787853566756 + t10_tmp) * -0.2785 +
         t13 * (t39 * 0.1573787853566756 - t12) * 0.2785);
    t10_tmp = t9 * t52;
    t12 = t13 * t53;
    right_foot_jac_array[3] =
        ((t7 * -0.00044695575041295863 - t11 * 0.0021796961771899559) +
         ((t14 * 0.0011820007746820549 + t15 * 0.005764334763854388) +
          t16 * 0.002796853981665954)) +
        ((((t35_tmp * -0.013639587199321641 - t52 * t64 * 0.24916) -
           t53 * t64 * 0.01306) -
          t10_tmp * t64 * 0.2785) -
         t12 * t64 * 0.2785);
    right_foot_jac_array[4] =
        ((((((t14 * 0.01385 - t15 * 0.00284) + t16 * 0.0058532589962366228) +
            t35_tmp * 0.001200235057712058) +
           t33 * t52 * 0.24916) +
          t33 * t53 * 0.01306) +
         t9 * t33 * t52 * 0.2785) +
        t13 * t33 * t53 * 0.2785;
    right_foot_jac_array[5] =
        ((t7 * 0.0025348109127530049 + t11 * 0.01236166589493983) +
         ((t14 * 0.0002084187189579907 + t15 * 0.0010164081892845671) +
          t16 * 0.00049316103378034732)) +
        ((((t35_tmp * -0.0024050282809358488 + t52 * t66 * 0.24916) +
           t53 * t66 * 0.01306) +
          t10_tmp * t66 * 0.2785) +
         t12 * t66 * 0.2785);
    right_foot_jac_array[6] =
        ((((t67 * -0.24916 - t68 * 0.01306) + t76 * 0.01306) - t77 * 0.24916) -
         t86) -
        t88;
    right_foot_jac_array[7] = ((((t59 * -0.01306 + t60 * 0.24916) + t74) - t73) -
                               t39 * 0.22581568117665551) -
                              t73_tmp * 0.011836381426260719;
    right_foot_jac_array[8] =
        ((((t69 * -0.24916 - t70 * 0.01306) + t78 * 0.01306) - t36 * 0.24916) -
         t89) -
        t92;
    right_foot_jac_array[9] = -t86 - t88;
    right_foot_jac_array[10] = t74 - t73;
    right_foot_jac_array[11] = -t89 - t92;
    right_foot_jac_array[12] = 0.0;
    right_foot_jac_array[13] = 0.0;
    right_foot_jac_array[14] = 0.0;

    Eigen::Matrix<double, 3, LEG_DOF> right_foot_jac;
    right_foot_jac << right_foot_jac_array[0], right_foot_jac_array[3], right_foot_jac_array[6], right_foot_jac_array[9], right_foot_jac_array[12],
                      right_foot_jac_array[1], right_foot_jac_array[4], right_foot_jac_array[7], right_foot_jac_array[10], right_foot_jac_array[13],
                      right_foot_jac_array[2], right_foot_jac_array[5], right_foot_jac_array[8], right_foot_jac_array[11], right_foot_jac_array[14];
    
    return right_foot_jac;
}
}  // namespace robot
